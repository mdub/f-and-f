#! /usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require "clamp"
require "faith_and_farming/book"
require "paint"
require "yaml"

Clamp do

  option ["-f", "--from"], "PAGE", "first page", :default => 72, &method(:Integer)
  option ["-t", "--to"], "PAGE", "last page", :default => 720, &method(:Integer)
  option ["-p", "--page"], "PAGE", "only page" do |arg|
    self.from = self.to = arg
  end

  def pages
    FaithAndFarming::Book.pages(from..to)
  end

  def elements
    pages.elements
  end

  subcommand ["blocks", "b"], "display blocks" do

    def execute
      pages.each do |page|
        puts "\nPAGE #{page.page_index}"
        page.blocks.each do |block|
          bounds = block.bounds
          puts "\nBLOCK {left #{bounds.left}, right #{bounds.right}, top #{bounds.top}, bottom #{bounds.bottom}}\n\n"
          puts block.text.gsub(/^/, "  ")
        end
      end
    end

  end

  subcommand ["elements", "e"], "display page elements" do

    def execute
      elements.each do |element|
        type_name = element.class.name.sub(/.*::/,"")
        data = {"type" => type_name}.merge(element.to_h)
        puts YAML.dump(data)
      end
    end

  end

  subcommand ["names", "n"], "display entry names" do

    option ["-p", "--show-pages"], :flag, "show pages"
    option ["-l", "--max-level"], "N", "maximum level", &method(:Integer)

    INDENT = Paint["| ", :faint]
    MARRIED = Paint[" = ", :cyan]

    def execute
      elements.each do |e|
        case e
        when FaithAndFarming::Book::Elements::StartOfPage
          puts "\n--- page #{e.page_index} ---" if show_pages?
        when FaithAndFarming::Book::Elements::Entry
          next if max_level && e.level > max_level
          indent = INDENT * (e.level - 1)
          puts "#{indent}#{entry_heading(e)}"
        end
      end
    end

    private

    def entry_heading(entry)
      entry.people.map(&:name).join(MARRIED)
    end

  end

  subcommand ["errors"], "check for errors" do

    def execute
      elements.each do |e|
        case e
        when FaithAndFarming::Book::Elements::StartOfPage
          @page_index = e.page_index
        when FaithAndFarming::Book::Elements::Entry
          if @last_entry && e.level > @last_entry.level + 1
            entry_error(
              page_index: @page_index,
              entry: e,
              message: "more than 1 level deeper than: #{@last_entry.heading}"
            )
          end
          @last_entry = e
        end
      end
    end

    def entry_error(page_index:, entry:, message:)
      puts "p #{page_index} - #{entry.heading}"
      puts "  ERROR: #{message}"
    end

  end

  subcommand ["families", "f"], "display families" do

    def execute
      db = pages.family_tree
      db.families.each do |family|
        puts YAML.dump(family_data(family))
      end
    end

    def family_data(family)
      {}.tap do |h|
        h["husband"] = family.husband.name
        h["wife"] = family.wife.name
        h["children"] = family.children.map(&:name) unless family.children.empty?
      end
    end

  end

  subcommand ["gedcom"], "generate GEDCOM" do

    def execute
      pages.family_tree.write_gedcom($stdout)
    end

  end

  def run(*)
    super
  rescue Errno::EPIPE
  end

end
