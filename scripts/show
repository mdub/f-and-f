#! /usr/bin/env ruby

$: << File.expand_path("../../lib", __FILE__)

require "clamp"
require "faith_and_farming/book"
require "paint"
require "yaml"

Clamp do

  option ["-f", "--from"], "PAGE", "first page", :default => 72, &method(:Integer)
  option ["-t", "--to"], "PAGE", "last page", :default => 720, &method(:Integer)
  option ["-p", "--page"], "PAGE", "only page" do |arg|
    self.from = self.to = arg
  end
  option ["--[no-]color"], :flag, "show colours", default: true

  def pages
    FaithAndFarming::Book.pages(from..to)
  end

  def elements
    pages.elements
  end

  subcommand ["blocks", "b"], "display blocks" do

    def execute
      pages.each do |page|
        puts "\nPAGE #{page.page_index}"
        page.blocks.each do |block|
          bounds = block.bounds
          puts "\nBLOCK {left #{bounds.left}, right #{bounds.right}, top #{bounds.top}, bottom #{bounds.bottom}}\n\n"
          puts block.text.gsub(/^/, "  ")
        end
      end
    end

  end

  subcommand ["elements", "e"], "display page elements" do

    def execute
      elements.each do |element|
        type_name = element.class.name.sub(/.*::/,"")
        data = {"type" => type_name}.merge(element.to_h)
        puts YAML.dump(data)
      end
    end

  end

  subcommand ["names", "n"], "display entry names" do

    option ["-p", "--show-pages"], :flag, "show pages"
    option ["-d", "--show-dates"], :flag, "show dates of birth/death"
    option ["-e", "--show-errors"], :flag, "show errors"
    option ["-l", "--max-level"], "N", "maximum level", &method(:Integer)

    def execute
      elements.each do |e|
        case e
        when FaithAndFarming::Book::Elements::StartOfPage
          @page_index = e.page_index
          if show_pages?
            puts ""
            puts faint("--- page #{e.page_index}")
          end
        when FaithAndFarming::Book::Elements::Entry
          next if max_level && e.level > max_level
          puts "#{indent(e.level)}#{faint("â€¢")} #{entry_heading(e)}"
          if @last_entry && e.level > @last_entry.level + 1
            show_error("too deep", level: e.level)
          end
          e.errors.each do |error|
            show_error(error, level: e.level)
          end
          @last_entry = e
        end
      end
    end

    private

    def entry_heading(entry)
      entry.people.map(&method(:person_details)).join(paint(" = ", :cyan))
    end

    def indent(level = 1)
      faint("| ") * (level - 1)
    end

    def person_details(person)
      details = person.name
      if show_dates?
        lifespan = [person.date_of_birth, person.date_of_death].map { |d| extract_year(d) }.join("-")
        details += " " + paint("(#{lifespan})", :faint, :green)
      end
      details
    end

    def extract_year(date)
      return nil if date.nil?
      date.scan(/\d\d\d\d/).first
    end

    def show_error(message, level:)
      return unless show_errors?
      puts indent(level) + paint("!!! #{message}", :red)
    end

  end

  subcommand ["families", "f"], "display families" do

    def execute
      db = pages.family_tree
      db.families.each do |family|
        puts YAML.dump(family_data(family))
      end
    end

    def family_data(family)
      {}.tap do |h|
        h["husband"] = family.husband.name
        h["wife"] = family.wife.name
        h["children"] = family.children.map(&:name) unless family.children.empty?
      end
    end

  end

  subcommand ["gedcom"], "generate GEDCOM" do

    def execute
      pages.family_tree.write_gedcom($stdout)
    end

  end

  def paint(text, *style)
    return text unless color?
    Paint[text, *style]
  end

  def faint(text)
    paint(text, :faint)
  end

  def run(*)
    super
  rescue Errno::EPIPE
  end

end
